{"version":3,"sources":["../src/DataSource.jsx"],"names":["DataFactory","path","pagesize","callback","console","log","datasource","pageSize","getRows","params","URL","__BASE_URL__","endRow","fetch","then","response","status","error","json","body","data","startRow","rowsThisPage","items","lastRow","pageInfo","total","pages","document","querySelector","onfocus","e","currentVal","target","value","reg","onblur","test","successCallback","catch","err","failCallback"],"mappings":";;;;;;;;;;;;;;;;IAAqBA,W;;;;;;;qCACDC,I,EAAMC,Q,EAAUC,Q,EAAU;AAC1CC,cAAQC,GAAR,CAAY,uCAAZ;AACA,UAAIC,aAAa;AACfC,kBAAUL,QADK;AAEfM,iBAAS,iBAAUC,MAAV,EAAkB;AACzB,cAAMC,WAASC,YAAT,GAAwBV,IAAxB,cAAqCC,QAArC,cAAsDO,OAAOG,MAAP,GAAgBV,QAA5E;AACAW,gBAAMH,GAAN,EACCI,IADD,CACM,UAAUC,QAAV,EAAoB;AACxB,gBAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BZ,sBAAQa,KAAR,CAAc,OAAd;AACA;AACD;AACD,mBAAOF,SAASG,IAAT,EAAP;AACD,WAPD,EAQCJ,IARD,CAQM,UAAUI,IAAV,EAAgB;AACpB,gBAAIA,IAAJ,EAAU;AACR,qBAAOA,KAAKC,IAAZ;AACD;AACF,WAZD,EAaCL,IAbD,CAaM,UAAUM,IAAV,EAAgB;AACpB,gBAAIA,IAAJ,EAAU;AACRhB,sBAAQC,GAAR,CAAY,gBAAgBI,OAAOY,QAAvB,GAAkC,MAAlC,GAA2CZ,OAAOG,MAA9D;AACA,kBAAMU,eAAeF,KAAKG,KAA1B;AACA,kBAAIC,UAAU,CAAC,CAAf;AACAA,wBAAUJ,KAAKK,QAAL,CAAcC,KAAxB;AACAvB,uBAASiB,KAAKK,QAAL,CAAcC,KAAvB,EAA8BN,KAAKK,QAAL,CAAcE,KAA5C;AACAC,uBAASC,aAAT,CAAuB,UAAvB,EAAmCC,OAAnC,GAA6C,UAACC,CAAD,EAAO;AAClD,oBAAMC,aAAaD,EAAEE,MAAF,CAASC,KAA5B;AACA,oBAAMC,MAAM,kBAAZ;AACAJ,kBAAEE,MAAF,CAASG,MAAT,GAAkB,UAACL,CAAD,EAAO;AACvB,sBAAI,CAACI,IAAIE,IAAJ,CAASN,EAAEE,MAAF,CAASC,KAAlB,CAAL,EAA+B;AAC7BH,sBAAEE,MAAF,CAASC,KAAT,GAAiBF,UAAjB;AACD;AACF,iBAJD;AAKD,eARD;AASAvB,qBAAO6B,eAAP,CAAuBhB,YAAvB,EAAqCE,OAArC;AACD;AACF,WA/BD,EAgCCe,KAhCD,CAgCO,UAAUC,GAAV,EAAe;AACpBpC,oBAAQa,KAAR,CAAcuB,GAAd;AACA/B,mBAAOgC,YAAP;AACD,WAnCD;AAoCD;AAxCc,OAAjB;;AA2CA,aAAOnC,UAAP;AACD;;;;;kBA/CkBN,W","file":"DataSource.js","sourcesContent":["export default class DataFactory {\n  createDatasource (path, pagesize, callback) {\n    console.log('agtable data ajax run this...........')\n    let datasource = {\n      pageSize: pagesize,\n      getRows: function (params) {\n        const URL = `${__BASE_URL__}${path}?size=${pagesize}&page=${params.endRow / pagesize}`\n        fetch(URL)\n        .then(function (response) {\n          if (response.status !== 200) {\n            console.error('error')\n            return\n          }\n          return response.json()\n        })\n        .then(function (json) {\n          if (json) {\n            return json.body\n          }\n        })\n        .then(function (data) {\n          if (data) {\n            console.log('asking for ' + params.startRow + ' to ' + params.endRow)\n            const rowsThisPage = data.items\n            let lastRow = -1\n            lastRow = data.pageInfo.total\n            callback(data.pageInfo.total, data.pageInfo.pages)\n            document.querySelector('#current').onfocus = (e) => {\n              const currentVal = e.target.value\n              const reg = /^\\+?[1-9][0-9]*$/\n              e.target.onblur = (e) => {\n                if (!reg.test(e.target.value)) {\n                  e.target.value = currentVal\n                }\n              }\n            }\n            params.successCallback(rowsThisPage, lastRow)\n          }\n        })\n        .catch(function (err) {\n          console.error(err)\n          params.failCallback()\n        })\n      }\n    }\n\n    return datasource\n  }\n}\n"]}